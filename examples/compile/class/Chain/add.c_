#include  "Chain._"

procedure_(Chain_*, (Chain, add),
(let  Ptr (Chain_), sum),
(let  Ptr (Chain ), augend),
(let  Ptr (Chain ), addend))
	Var join = validate_(sum)? sum : new__(*sum);
	guard_(join, NULL)
	if (join != sum) *join = (Chain){.type = type_(Chain)};
	Chain_ _augend[1] = {*augend};
	Chain_ _addend[1] = {*addend};
	_augend->type = (Type)typex_(Iterable, Chain);
	_addend->type = (Type)typex_(Iterable, Chain);
	Var   type = join->type;
	join->type = (Type)typex_(Iterable, Chain);
	Var it
	=  solver_(Iterable, add)
	(abstract_(Iterable, join),
	 abstract_(Iterable,_augend),
	 abstract_(Iterable,_addend));
	join->type = type;
	guard_(it, (test_(join != sum, free(join)), NULL))
	post_ (it->concrete == join);
	return join;
end
